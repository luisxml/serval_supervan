


SUNAT - Tipo de Cambio Oficial



  Consulta de tipo de cambio 




 Descargar  

Enviar Correo : 

  

Seleccione Mes : 

  


 Buscar  


Tipo de Cambio Mensual 






Notas

1.- El tipo de cambio publicado corresponde a la cotización de cierre de la SBS del día anterior.

2.- En los días que no se cuente con tipo de cambio publicado, se deberá tomar el del día inmediato anterior.

3.- Para efectos del Impuesto a la Renta, se deberá tomar el tipo de cambio de cierre, al 31 de Diciembre del ejercicio correspondiente. Para Renta 2018, ingrese aquí.
 
  

   



© 2020 SUNAT Derechos Reservados 
{{ var date = date || new Date(), month = date.getMonth(), year = date.getFullYear(), first = new Date(year, month, 1), last = new Date(year, month + 1, 0), startingDay = first.getDay(), thedate = new Date(year, month, 1 - startingDay), dayclass = lastmonthcss, today = new Date(), i, j; if (mode === 'week') { thedate = new Date(date); thedate.setDate(date.getDate() - date.getDay()); first = new Date(thedate); last = new Date(thedate); last.setDate(last.getDate()+6); } else if (mode === 'day') { thedate = new Date(date); first = new Date(thedate); last = new Date(thedate); last.setDate(thedate.getDate() + 1); } }} <table class="calendar-table table table-condensed"> <thead> <tr> <td colspan="7" style="text-align: center"> <table style="white-space: nowrap; width: 100%"> <tr> <td style="text-align: left;" width="30%"> <span class="btn-group"> <button class="js-cal-prev btn btn-default">&lt;</button> <button class="js-cal-next btn btn-default">&gt;</button> </span> <button class="js-cal-option btn btn-default {{: first.toDateInt() <= today.toDateInt() && today.toDateInt() <= last.toDateInt() ? 'active':'' }}" data-date="{{: today.toISOString()}}" data-mode="month">{{: todayname }}</button> </td> <td style="text-align: center" width="40%"> <span class="btn-group btn-group-lg"> {{ if (mode !== 'day') { }} {{ if (mode === 'month') { }}<button class="js-cal-option btn btn-link disabled" data-mode="year">{{: months[month] }}</button>{{ } }} {{ if (mode ==='week') { }} <button class="btn btn-link disabled">{{: shortMonths[first.getMonth()] }} {{: first.getDate() }} - {{: shortMonths[last.getMonth()] }} {{: last.getDate() }}</button> {{ } }} <button class="js-cal-years btn btn-link disabled">{{: year}}</button> {{ } else { }} <button class="btn btn-link disabled"> {{: date.toDDMMAAAAString() }} [{{: days[date.getDay()] }}]</button> {{ } }} </span> <button class="js-cal-search" style="display: none;">novisible</button> </td> <td style="text-align: left;" width="30%">&nbsp</td> </tr> </table> </td> </tr> </thead> {{ if (mode ==='year') { month = 0; }} <tbody> {{ for (j = 0; j < 3; j++) { }} <tr> {{ for (i = 0; i < 4; i++) { }} <td class="calendar-month month-{{:month}} js-cal-option" data-date="{{: new Date(year, month, 1).toISOString() }}" data-mode="month"> {{: months[month] }} {{ month++;}} </td> {{ } }} </tr> {{ } }} </tbody> {{ } }} {{ if (mode ==='month' || mode ==='week') { }} <thead> <tr class="c-weeks"> {{ for (i = 0; i < 7; i++) { }} <th class="table-bordered c-name"> {{: days[i] }} </th> {{ } }} </tr> </thead> <tbody> {{ for (j = 0; j < 6 && (j < 1 || mode === 'month'); j++) { }} {{ if (thedate <= last) { }} <tr> {{ for (i = 0; i < 7; i++) { }} {{ if (thedate > last) { dayclass = nextmonthcss; } else if (thedate >= first) { dayclass = thismonthcss; } }} <td class="table-bordered calendar-day {{: dayclass }} {{: thedate.toDateCssClass() }} {{: date.toDateCssClass() === thedate.toDateCssClass() ? 'selected':'' }} {{: daycss[i] }} js-cal-option" data-date="{{: thedate.toISOString() }}"> <div class="date">{{: thedate.getDate() }}</div> {{ thedate.setDate(thedate.getDate() + 1);}} </td> {{ } }} </tr> {{ } }} {{ } }} </tbody> {{ } }} {{ if (mode ==='day') { }} <tbody> <tr> <td colspan="7" style="border-top:none;"> <table class="table table-striped table-condensed table-bordered" > <thead> <tr> <th>Tipo de Marcación / Papeleta</th> <th>Inicio</th> <th>Fin</th> <th>Motivo de Papeleta</th> <th>Estado</th> </tr> </thead> <tbody id="tbodyAsistencias"> </tbody> </table> </td> </tr> </tbody> {{ } }} </table>  //extend jquery $.extend({ quickTemplate: function (template) { return new Function( "obj", "var p=[], "+ "print=function(){p.push.apply(p,arguments);}; "+ "with(obj){p.push('"+ template.replace(/[\r\t\n]/g," ").split("{{").join("\t") .replace(/((^|\}\})[^\t]*)'/g,"$1\r") .replace(/\t:(.*?)\}\}/g,"',$1,'").split("\t").join("');").split("}}").join("p.push('").split("\r").join("\\'")+ "');} "+ "return p.join('');" ) } }); $.extend(Date.prototype, { toDateCssClass: function () { //provides a string that is _year_month_day, intended to be widely usable as a css class return '_' + this.getFullYear() + '_' + (this.getMonth() + 1) + '_' + this.getDate(); }, toDateInt: function () { //this generates a number useful for comparing two dates; return ((this.getFullYear()*12) + this.getMonth())*32 + this.getDate(); }, toTimeString: function() { var hours = this.getHours(), minutes = this.getMinutes(), hour = (hours > 12) ? (hours - 12) : hours, ampm = (hours >= 12) ? ' pm' : ' am'; if (hours === 0 && minutes===0) { return ''; } if (minutes > 0) { return hour + ':' + minutes + ampm; } return hour + ampm; }, toISOString:function() {//cause ie return this.getUTCFullYear() + '-' + pad( this.getUTCMonth() + 1 ) + '-' + pad( this.getUTCDate() ) + 'T' + pad( this.getUTCHours() ) + ':' + pad( this.getUTCMinutes() ) + ':' + pad( this.getUTCSeconds() ) + '.' + String( (this.getUTCMilliseconds()/1000).toFixed(3) ).slice( 2, 5 ) + 'Z'; }, toDDMMAAAAString: function () { var mes = this.getMonth() + 1; var dia = this.getDate(); var strMes = '' + mes; var strDia = '' + dia; if(mes < 10) strMes = '0' + strMes; if(dia < 10) strDia = '0' + strDia; return strDia + '/' + strMes + '/' + this.getFullYear(); } }); (function ($) { var t = $.quickTemplate($('#tmplCalendar').get(0).innerHTML);//render function calendar($el, options) { $el.on('click', '.js-cal-prev', function () {//actions aren't currently in the template, but could be added easily... //prev var monthOld = options.date.getMonth(); switch(options.mode) { case 'year': options.date.setFullYear(options.date.getFullYear() - 1); break; case 'month': options.date.setMonth(options.date.getMonth() - 1); break; case 'week': options.date.setDate(options.date.getDate() - 7); break; case 'day': options.date.setDate(options.date.getDate() - 1); break; } var monthNew = options.date.getMonth(); if(monthOld != monthNew){ var dataCall = {date: options.date, indMes: '1', mode:options.mode}; recargarCalendarioWithCallback(drawWithData, dataCall); }else draw(); }).on('click', '.js-cal-next', function () {//next var monthOld = options.date.getMonth(); switch(options.mode) { case 'year': options.date.setFullYear(options.date.getFullYear() + 1); break; case 'month': options.date.setMonth(options.date.getMonth() + 1); break; case 'week': options.date.setDate(options.date.getDate() + 7); break; case 'day': options.date.setDate(options.date.getDate() + 1); break; } var monthNew = options.date.getMonth(); if(monthOld != monthNew){ var dataCall = {date: options.date, indMes: '1', mode:options.mode}; recargarCalendarioWithCallback(drawWithData, dataCall); }else draw(); }).on('click', '.js-cal-option', function () {//today year month week day Junio var monthOld = options.date.getMonth(); var $t = $(this), o = $t.data(); if (o.date) { o.date = new Date(o.date); } $.extend(options, o); var monthNew = options.date.getMonth(); if(monthOld != monthNew){ var dataCall = {date: options.date, indMes: '1', mode:options.mode}; recargarCalendarioWithCallback(drawWithData, dataCall); }else draw(); }).on('click', '.event', function () {//event /*var $t = $(this), index = +($t.attr('data-index')), data; if (isNaN(index)) { return true; } data = options.data[index]; onClickMostrarModalRegistro(data, options.mode);*/ return false; }).on('click', '.event-day', function () {//event-day /*var $t = $(this), index = +($t.attr('data-index')), data; if (isNaN(index)) { return true; } data = options.data[index]; onClickMostrarModalRegistro(data, options.mode);*/ return false; }).on('click', '.js-cal-search', function () {//search var fecBusqueda = $('#fecAsistenciaBusq').val(); var dteBusqueda = obtenerAnioMes(fecBusqueda); var anhoConsulta = dteBusqueda.getFullYear(); var mesConsulta = dteBusqueda.getMonth(); var dataCall = {date:dteBusqueda, indMes: '1', mode:'month'}; recargarCalendarioWithCallback(drawWithData, dataCall); return false; }); function dayAddEvent(index, event) { var $event = $('<div/>', {'class': 'event', text: event.title, title: event.title, 'data-index': index}), start = event.start, end = event.end || start, startint = start.toDateInt(), dateint = options.date.toDateInt(), endint = end.toDateInt(); if (startint > dateint || endint < dateint) { return; } options.dateTotalEvent++; /*var htmlAsistencia = '<tr>'; htmlAsistencia += '<td class="'+event.tipoAsistencia+'-all-day"><i class="fa fa-square"></i>&nbsp<a class="event-day" data-index="'+index+'" href="#">' + event.title + '</a></td>'; htmlAsistencia += '<td>' + event.horaIngreso + '</td>'; htmlAsistencia += '<td>' + getString(event.horaSalida) + '</td>'; htmlAsistencia += '<td>' + event.obsPapeleta + '</td>'; htmlAsistencia += '<td>' + event.desEstado + '</td>'; htmlAsistencia += '</tr>';*/ var htmlAsistencia = '<tr>'; htmlAsistencia += '<td class="'+event.tipoAsistencia+'-all-day"><i class="fa fa-square"></i>&nbsp<a class="event-day" data-index="'+index+'" href="#">' + 'Titulo222' + '</a></td>'; htmlAsistencia += '<td>Compra:3.25</td>'; htmlAsistencia += '<td>Venta:3.55</td>'; htmlAsistencia += '</tr>'; $('#tbodyAsistencias').append(htmlAsistencia); } function monthAddEvent(index, event) { var $event = $('<div/>', {'class': 'event', text: event.title, title: event.title, 'data-index': index}), e = new Date(event.start), dateclass = e.toDateCssClass(), day = $('.' + e.toDateCssClass()), empty = $('<div/>', {'class':'clear event', html:'&nbsp;'}), numbevents = 0, //time = event.start.toTimeString(), time = '', endday = event.end && $('.' + event.end.toDateCssClass()).length > 0, checkanyway = new Date(e.getFullYear(), e.getMonth(), e.getDate()+40), existing, i; if(event.hing != null) time = event.horaIngreso.substr(0,5); $event.toggleClass(event.tipoAsistencia+'-all-day', true); /*if (!!time) { $event.html('<strong>' + time + '</strong> ' + $event.html()); }*/ $event.html('<strong>' + event.tipoCambio + '</strong> ' + event.monto); if (!event.end) { $event.addClass('begin end'); $('.' + event.start.toDateCssClass()).append($event); return; } while (e <= event.end && (day.length || endday || options.date < checkanyway)) { if(day.length) { existing = day.find('.event').length; numbevents = Math.max(numbevents, existing); for(i = 0; i < numbevents - existing; i++) { day.append(empty.clone()); } day.append( $event. toggleClass('begin', dateclass === event.start.toDateCssClass()). toggleClass('end', dateclass === event.end.toDateCssClass()) ); $event = $event.clone(); $event.html('&nbsp;'); } e.setDate(e.getDate() + 1); dateclass = e.toDateCssClass(); day = $('.' + dateclass); } } function yearAddEvents(events, year) {//not used var counts = [0,0,0,0,0,0,0,0,0,0,0,0]; $.each(events, function (i, v) { if (v.start.getFullYear() === year) { counts[v.start.getMonth()]++; } }); $.each(counts, function (i, v) { if (v!==0) { $('.month-'+i).append('<span class="badge">'+v+'</span>'); } }); } function draw() { $el.html(t(options)); $('.' + (new Date()).toDateCssClass()).addClass('today'); //potential optimization (untested), this object could be keyed into a dictionary on the dateclass string; the object would need to be reset and the first entry would have to be made here if (options.data && options.data.length) { if (options.mode === 'year') { yearAddEvents(options.data, options.date.getFullYear()); } else if (options.mode === 'month' || options.mode === 'week') { $.each(options.data, monthAddEvent); } else { options.dateTotalEvent = 0; $.each(options.data, dayAddEvent); if(options.dateTotalEvent == 0) $('#tbodyAsistencias').append('<tr><td colspan="5"><i>No se encontraron resultados.</i></td></tr>'); } }else{ if (options.mode === 'day') $('#tbodyAsistencias').append('<tr><td colspan="5"><i>No se encontraron resultados.</i></td></tr>'); } } var drawWithData = function (dataAsistencia, mode, date) { options.date = date; options.mode = mode; options.data = dataAsistencia; draw(); }; var drawWithNoData = function (mode, date) { options.date = date; options.mode = mode; draw(); }; draw(); };//fin calendar (function (defaults, $, window, document) {//valores por defecto $.extend({ calendar: function (options) { return $.extend(defaults, options); } }).fn.extend({ calendar: function (options) { options = $.extend({}, defaults, options); return $(this).each(function () { var $this = $(this); calendar($this, options); }); } }); })({ days: ["Domingo", "Lunes", "Martes", "Miércoles", "Jueves", "Viernes", "Sábado"], months: ["Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre"], shortMonths: ["Ene", "Feb", "Mar", "Abr", "May", "Jun", "Jul", "Ago", "Sep", "Oct", "Nov", "Dic"], date: (new Date()), daycss: ["c-sunday", "", "", "", "", "", "c-saturday"], todayname: "Mes Actual", thismonthcss: "current", lastmonthcss: "outside", nextmonthcss: "outside", mode: "month", data: [] }, jQuery, window, document); })(jQuery);              var CONTEXT_APP = "/cl-at-ittipcam"; $(document).ready(function() { //Inicialización $.ajaxSetup({ cache: false }); $(document).ajaxStart(function() { $.blockUI({ boxed: !0, baseZ: 2000 }) }).ajaxStop($.unblockUI); bootbox.setLocale("es"); inicializarDatosPapeleta(); validarDatosPapeleta(); var dteBusqueda = new Date(); var data = {}; data.anhoConsulta = dteBusqueda.getFullYear(); data.mesConsulta = dteBusqueda.getMonth(); data.diaConsulta = dteBusqueda.getDate(); data.indMes = '1'; data.mode = 'month'; $('#fecAsistenciaBusq').val(obtenerAnioMesActual()); setTimeout(function(){ recargarCalendario(data); },2500); }); function validateEmail(email) { const re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/; return re.test(String(email).toLowerCase()); } function inicializarDatosPapeleta(){ $('#fecAsistenciaBusqDiv').datetimepicker({ locale: 'es', format: 'MMM YYYY', icons: {date: "fa fa-calendar",up: "fa fa-arrow-up",down: "fa fa-arrow-down"}, useCurrent: false, ignoreReadonly: true, maxDate: new Date() }).on('dp.change', function (ev) { return true; }); $("#btnCerrarPopupPapeleta").click(function(){ $("#divDatosPapeletaPopup").modal('hide'); }); $("#btnDescargar").click(function(){ var fecBusqueda = $('#fecAsistenciaBusq').val(); var dteBusqueda = obtenerAnioMes(fecBusqueda); if(dteBusqueda!=null){ grecaptcha.ready(function() { grecaptcha.execute(site_key_sunat, {action: 'token'}).then(function(token) { $("#tokenDownload").val(token); $("#anioDownload").val(dteBusqueda.getFullYear()); $("#mesDownload").val(dteBusqueda.getMonth()); $("#frmArchivoDownload").submit(); }); }); }else{ mostrarMensajeError("Seleccione un periodo."); } }); $("#btnCorreo").click(function(){ var fecBusqueda = $('#fecAsistenciaBusq').val(); var dteBusqueda = obtenerAnioMes(fecBusqueda); if(dteBusqueda!=null){ if(validateEmail($('#desCorreo').val())){ grecaptcha.ready(function() { grecaptcha.execute(site_key_sunat, {action: 'token'}).then(function(token) { var params = {}; params["anio"] = dteBusqueda.getFullYear(); params["mes"] = dteBusqueda.getMonth(); params["correo"] = $('#desCorreo').val(); params["token"] = token; var paramsJson = $.toJSON(params); var URL_CORREO = CONTEXT_APP+"/tcS01Alias/enviarCorreo"; $.ajax({ type: "POST", url: URL_CORREO, dataType: 'json', data: paramsJson, contentType: "application/json; charset=utf-8", success: function(resultado){ if(resultado.enviado=='1'){ mostrarMensajeExito("Correo enviado."); } } }); }); }); }else{ mostrarMensajeError("Ingrese un correo válido."); } }else{ mostrarMensajeError("Seleccione un periodo."); } }); }  